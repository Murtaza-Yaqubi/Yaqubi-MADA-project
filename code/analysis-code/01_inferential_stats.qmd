---
title: "Inferential Statistics"
author: "Murtaza Yaqubi"
format: html
editor: visual
---

```{r}
# Filter the data for individuals under 50 with normal cholesterol (<200 mg/dL) and create risk indicator variables for elevated blood pressure and ST depression.
cleaned_df <- cardio_df %>%
  filter(age < 50, serumcholestrol > 0, serumcholestrol < 200) %>%  
  mutate(
    # Create a binary variable for blood pressure:
    # "Elevated" if restingBP is between 120 and 129; otherwise, "Otherwise"
    elevated_BP = if_else(between(restingBP, 120, 129), "Elevated", "Otherwise"),

    # Create a binary indicator for ST depression:
    # "Elevated" if oldpeak is greater than 1; otherwise, "Normal"
    elevated_oldpeak = if_else(oldpeak > 1, "Elevated", "Normal")
  ) %>% 
  # Select the variables we want to keep
  select(age, gender, chestpain, restingBP, serumcholestrol, fastingbloodsugar, 
         maxheartrate, oldpeak, target, elevated_BP, elevated_oldpeak)

# Print a sample of the cleaned dataset
head(cleaned_df)

# Save the processed data
saveRDS(cleaned_df, file = here("data", "processed-data", "cleaned_df.rds"))

# Create a summary table by grouping the cleaned data by blood pressure status, ST depression status, and heart disease (target)
summary_table <- cleaned_df %>%
  group_by(elevated_BP, elevated_oldpeak, target) %>%
  summarise(count = n(), .groups = "drop")
print(summary_table)

summary_df = skimr::skim(summary_table)
print(summary_df)

# save to file
summarytable_file = here("results", "tables", "summarytable2.rds")
saveRDS(summary_df, file = summarytable_file)

# Interaction Visualization: Heatmap
interaction_counts <- cleaned_df %>%
  group_by(elevated_BP, elevated_oldpeak, target) %>%
  summarise(count = n(), .groups = "drop")

p7 <- heatmap_plot <- ggplot(interaction_counts, aes(x = elevated_BP, y = elevated_oldpeak, fill = count)) +
  geom_tile(color = "white", size = 0.5) +
  geom_text(aes(label = count), color = "black", size = 5) +
  facet_wrap(~ target, ncol = 2) +
  scale_fill_gradient(low = "lightgreen", high = "forestgreen") +
  labs(title = "Interaction between Blood Pressure and ST Depression",
       subtitle = "By Heart Disease Status (Individuals <50 with Normal Cholesterol)",
       x = "Blood Pressure Status",
       y = "ST Depression Status",
       fill = "Count") +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  )

plot(p7)
figure_file = here("results", "figures","interaction heatmap.png")
ggsave(filename = figure_file, plot=p7)

# Visualize CVD risk by blood pressure and ST depression status using faceted grouped Bar Chart
p8 <- ggplot(interaction_counts, aes(x = elevated_BP, y = count, fill = target)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
  facet_wrap(~ elevated_oldpeak, ncol = 2, scales = "free_y") +
  labs(title = "CVD Risk by Blood Pressure and ST Depression Status",
       subtitle = "Individuals Under 50 with Normal Cholesterol (<200 mg/dL)",
       x = "Blood Pressure Status",
       y = "Count",
       fill = "Heart Disease") +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(face = "bold"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    legend.position = "bottom"
  )

plot(p8)
figure_file = here("results", "figures","CVD risk by BP and ST depression.png")
ggsave(filename = figure_file, plot=p8)


# Chi-Square Tests

# Create a contingency table for blood pressure status vs. heart disease
table_bp_target <- table(cleaned_df$elevated_BP, cleaned_df$target)
print(table_bp_target)
chisq_test_bp <- chisq.test(table_bp_target)
print(chisq_test_bp)

# Create a contingency table for ST depression vs. heart disease
table_oldpeak_target <- table(cleaned_df$elevated_oldpeak, cleaned_df$target)
print(table_oldpeak_target)
chisq_test_oldpeak <- chisq.test(table_oldpeak_target)
print(chisq_test_oldpeak)

# Logistic Regression Analysis

# Convert target to a binary outcome for regression (1 = Heart Disease, 0 = No Heart Disease)
cleaned_df <- cleaned_df %>%
  mutate(target_binary = if_else(target == "Heart Disease", 1, 0))

# Fit a logistic regression model with elevated_BP and elevated_oldpeak as predictors
model <- glm(target_binary ~ elevated_BP + elevated_oldpeak, 
             data = cleaned_df, family = binomial)
summary(model)

# save fit results table  
table_file1 = here("results", "tables", "resulttable1.rds")
saveRDS(model, file = table_file1)

# Fit a logistic regression model including the interaction term
model_interaction <- glm(target_binary ~ elevated_BP * elevated_oldpeak, 
                         data = cleaned_df, family = binomial)
summary(model_interaction)

# save fit results table  
table_file1 = here("results", "tables", "resulttable2.rds")
saveRDS(model_interaction, file = table_file1)

# Extract Odds Ratios (OR) from the logistic regression model with interaction
or_values <- exp(coef(model_interaction))
or_ci <- exp(confint(model_interaction))
or_results <- data.frame(
  Term = names(or_values),
  OR = or_values,
  CI_lower = or_ci[, 1],
  CI_upper = or_ci[, 2]
)
print("Odds Ratios (with 95% CI):")
print(or_results)

# save fit results table  
table_file2 = here("results", "tables", "table2_odds_ratios.rds")
saveRDS(or_results, file = table_file2)


# Tidy the model output and compute odds ratios and 95% CI
tidy_model <- tidy(model_interaction, exponentiate = TRUE, conf.int = TRUE)
print(tidy_model)

# Fit a log-binomial model to estimate Relative Risks (RR)
rr_model <- glm(target_binary ~ elevated_BP + elevated_oldpeak, 
                data = cleaned_df, family = binomial(link = "log"))
rr_values <- exp(coef(rr_model))
rr_ci <- exp(confint(rr_model))
rr_results <- data.frame(
  Term = names(rr_values),
  RR = rr_values,
  CI_lower = rr_ci[, 1],
  CI_upper = rr_ci[, 2]
)
print("Relative Risks (with 95% CI):")
print(rr_results)

# save fit results table  
table_file3 = here("results", "tables", "table3_relative_risks.rds")
saveRDS(rr_results, file = table_file3)


# ROC Curve and AUC for the logistic regression model with interaction
roc_curve <- roc(cleaned_df$target_binary, predict(model_interaction, type = "response"))
plot(roc_curve, main = "ROC Curve for Logistic Regression Model", col = "blue", lwd = 2)
auc_value <- auc(roc_curve)
print(paste("AUC:", auc_value))

# Save ROC plot
roc_fig <- recordPlot()
saveRDS(roc_fig, file = here("results", "figures", "figure1_roc_logistic_model.rds"))

# Adjusted Logistic Regression Analysis including confounders (gender and fasting blood sugar)
adjusted_model <- glm(target_binary ~ elevated_BP * elevated_oldpeak + gender + fastingbloodsugar, 
                      data = cleaned_df, family = binomial)
summary(adjusted_model)

# Extract Odds Ratios (OR) for the adjusted model
adj_or_values <- exp(coef(adjusted_model))
adj_or_ci <- exp(confint(adjusted_model))
adj_or_results <- data.frame(
  Term = names(adj_or_values),
  OR = adj_or_values,
  CI_lower = adj_or_ci[, 1],
  CI_upper = adj_or_ci[, 2]
)
print("Adjusted Odds Ratios (with 95% CI):")
print(adj_or_results)

# save fit results table  
table_file4 = here("results", "tables", "table4_adjusted_odds_ratios.rds")
saveRDS(adj_or_results, file = table_file4)

# Tidy the adjusted model output and compute odds ratios and 95% CI
tidy_adjusted_model <- tidy(adjusted_model, exponentiate = TRUE, conf.int = TRUE)
print(tidy_adjusted_model)
```
